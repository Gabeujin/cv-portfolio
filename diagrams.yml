projects:
  - id: 1
    title: 전자지갑 연계
    diagram: |
      sequenceDiagram
      title 대민포털과 ERP 시스템의 사업 신청 및 제출서류 처리 프로세스
        participant 전자지갑서버 as 농어촌공사 전자지갑 클라우드
        participant 전자지갑API as 농어촌공사 전자지갑 API
        participant 사용자 as 사용자 (대민포털)
        participant 대민포털 as 대민포털 서버
        participant ERP시스템 as ERP 시스템 서버
        
        %% 1단계: 사업 신청
        사용자->>대민포털: (1) 사업 신청 (농지내놓기/농지구하기)
        
        %% 2단계: 신청 구분에 따른 처리
        alt 신청 구분 == "농지내놓기"
          대민포털->>ERP시스템: (2-1) 세부사업 지정 요청
          ERP시스템->>대민포털: (2-2) 세부사업 지정 완료 및 제출서류 목록 전송
        else 신청 구분 == "농지구하기"
          대민포털->>대민포털: (2) 이미 세부사업 지정 완료됨 (자동)
        end
        
        %% 3단계: 사용자 제출서류 확인 및 전송
        사용자->>대민포털: (3-1) 제출서류 목록 확인
        대민포털->>사용자: (3-2) 세부사업별 제출서류 목록 전달
        사용자->>전자지갑API: (3-3) 서류 제출 API 호출
        전자지갑API->>전자지갑서버: (3-4) 문서 제출
        
        %% 스케줄러 LOOP 시작 (5분마다 실행)
        loop 스케줄러(5분마다 반복)
          %% 4단계: 전자지갑 문서 확인
          대민포털->>전자지갑API: (4-1) 전자지갑에 제출된 문서 확인
          전자지갑API->>전자지갑서버: (4-2) 제출 서류 확인
          전자지갑서버->>전자지갑API: (4-3) 제출 서류 정보 전달
          전자지갑API->>대민포털: (4-4) 제출된 문서 목록 반환
        
          %% 5단계: ERP 시스템과의 매칭 및 검증
          대민포털->>ERP시스템: (5-1) 신청자 정보 및 제출서류 정보 확인 API 호출
          ERP시스템->>대민포털: (5-2) 신청정보 및 제출서류 정보 반환
        
          alt 제출대상 문서가 유효하지 않음 (사업별 제출서류 목록에 해당 사항 없거나 신청정보 없음)
            대민포털->>전자지갑API: (6) 문서 상태 변경 API 호출 (해당 문서 반려)
          else 제출대상 문서와 매칭 완료
            %% 6단계: ERP 시스템에 제출서류 전송
            대민포털->>전자지갑API: (6-1) 제출 대상 문서 및 상세정보 확인 API 호출
            전자지갑서버->>대민포털: (6-2) 문서 정보 및 실제 파일 전송 
            %% 7단계: PDF 파일 복사 및 삭제
            대민포털->>ERP시스템: (7-1) 제출 정보 전송 및 PDF 파일 복사(FTP)
            ERP시스템->>대민포털: (7-2) 작업 완료 응답 및 원본 PDF 파일 삭제 처리
            %% 8단계: 전자지갑 상태 변경
            대민포털->>전자지갑API: (8) 문서 상태 변경 API 호출(제출완료)
          end
        end
        %% 스케줄러 LOOP 종료
        
        %% 9단계: ERP에서 제출서류 관리
        ERP시스템->>ERP시스템: (9) 제출된 문서 확인, 다운로드, 삭제, 제출 일자 관리 가능
  - id: 2
    title: 행정망 연계 대용량 조회 서비스 구축
    diagram: |
      sequenceDiagram
      title 행정망 연계 대용량 조회 서비스 구축 프로세스
      
      %% 1단계: 행정망 연계 솔루션 설치
      participant 연계서버 as 연계 서버
      participant 개발DB as 개발 DB
      participant OracleJob as Oracle Job
      participant 운영DB as 운영 DB
      
      %% 1단계: 행정망 연계 솔루션 설치
      연계서버->>연계서버: (1) 행정망 연계 솔루션 설치
      
      %% 2단계: 배치 프로세스 설정
      연계서버->>개발DB: (2) 개발 DB에 맞게 배치 프로세스 JAR 파일의 SQL 수정
      %% 솔루션 구조는 주석 형태로 추가
      %% - (2-1) 배치 메인 메서드 구성 (최대 6개 스레드 병렬 처리)
      %% - (2-2) 망연계 KEY와 연계 테이블 KEY 전달하여 최종 수신 버전 체크
      %% - (2-3) Truncate and Load 또는 Merge 방식으로 데이터 병합
      alt 월 1회 데이터 병합
        연계서버->>개발DB: Truncate and Load 방식으로 데이터 병합
      else 수시 변경 작업
        연계서버->>개발DB: Merge 방식으로 데이터 변경 처리
      end
      
      %% 3단계: 개발 DB로 이관 작업
      연계서버->>개발DB: (3) 전달 받은 배치 파일 실행 후 개발 DB로 이관 작업 진행(상시)
      
      %% 4단계: 데이터 확인 및 테스트
      개발DB->>개발DB: (4) 데이터 확인 및 조회 테스트 진행
      
      %% 5단계: 통합 테이블 병합 작업
      loop 매일 밤 10시
        OracleJob->>운영DB: (5) 조회 성능을 위해 지역별 분리 테이블을<br/>하나의 통합 테이블로 병합 (실제 운영 중에 사용할 컬럼만 포함)
      end
      
      %% 6단계: 개발 DB에서 운영 DB로 이관 작업
      loop 매일 새벽 2시
        OracleJob->>개발DB: (6-1) 개발 DB의 데이터를 가져옴
        개발DB->>운영DB: (6-2) 운영 DB로 이관 작업 진행
      end
      
      %% 기타: CUD 작업 및 테이블 락 방지
      %% CUD 작업 관련 설명을 주석 형태로 추가
      %% - 모든 CUD 작업은 작업 상태를 로그로 기록합니다.
      %% - Optimistic Concurrency Control을 통해 동시 트랜잭션 방지를 구현합니다.
      %% - 트랜잭션 시작 시 상태를 기록하고 충돌 없을 시만 변경 적용합니다.
  - id: 3
    title: GIS 및 ERP 시스템 통합 조회 서비스
    diagram: |
      sequenceDiagram
      title GIS 및 ERP 시스템 통합 조회 프로세스
      
      participant 사용자 as 사용자 (프론트엔드)
      participant Frontend as 프론트엔드
      participant GISAPI as 농지공간정보 API
      participant Controller as Controller
      participant Service as ServiceImpl(Service)
      participant DAO as ServiceDAO(DAO)
      participant DB as ERP DB
      participant 외부ERP as 외부 ERP 시스템 (DB Link)
      
      %% 1단계: PNU 검색 및 지도 정보 조회
      사용자->>Frontend: (1) PNU 입력 후 검색 요청
      Frontend->>GISAPI: (2-1) GIS 지도 API 호출 (PNU 전송)
      GISAPI-->>Frontend: (2-2) 농지의 실시간 위치 정보 반환
      Frontend->>Frontend: (2-3) 데이터셋 메모리에 보관
        
      %% 2단계: 계약 정보 조회
      Frontend->>Controller: (3) PNU 기반 계약 정보 요청
      Controller->>Service: (3) MapServiceImpl 의 계약 정보 조회<br/>메서드 호출
      Service->>DAO: (4) MapServiceDAO 인터페이스를 통해<br/>계약 조회 요청(Mybatis)
      DAO->>DB: (4) MapServiceDAO.xml에<br/>매핑된 SQL 실행
      DB-->>DAO: (4) 계약 정보 반환
      DAO->>외부ERP: (4) DB Link를 통해 외부 ERP 시스템 계약 정보 조회
      외부ERP-->>DAO: (4) 외부 ERP 시스템의 계약 정보 반환
      DAO-->>Service: (4) 모든 계약 정보 반환
        
      %% 3단계: 통합 정보 머지 및 UI 표시
      Service->>Controller: (4) 통합된 계약 정보 반환
      Controller-->>Frontend: (4) 계약 정보 및 농지 위치 정보 전송
      Frontend->>Frontend: (5) 농지 위치 정보와 계약 정보를 hash 알고리즘으로 병합
      Frontend->>Frontend: (5) 동일 속성의 정보를 비교할 수 있도록 계약 정보 On/Off 기능 추가
      Frontend->>사용자: (5) 지도에 Marker 및 상세 정보 창 표시